10
rnorm(12)
rnorm(12, 10, 10)
plot(x,y)
x <- 1:1000
y <- sin(x) + rnorm(1000)
plot(x,y)
x <- 1:100
y <- sin(x) + rnorm(100)
plot(x,y)
plot(x,y, 'l')
x <- 1:100
y <- sin(x) + rnorm(100)
plot(x,y, 'l')
data(iris)
N <- nrow(iris)
P <- ncol(iris)
J <- nlevels(iris$Species)
odel.matrix(Species ~ ., data=iris);
y.all <- model.matrix(~ Species - 1, data=iris);
y     <- y.all[,-J];
out <- mlr(y, X, samp=1000, burn=100, device=0);
install.packages('mlr')
library(mlr)
out <- mlr(y, X, samp=1000, burn=100, device=0);
123
2er32t4
clear
z.out <- zelig(Y ~ X1 + X2, model = "mlogit.bayes", weights = w, data = mydata)
x.out <- setx(z.out)
s.out <- sim(z.out, x = x.out)
z.out <- zelig(Y ~ X1 + X2, model = "mlogit.bayes", weights = w, data = mydata)
x.out <- setx(z.out)
s.out <- sim(z.out, x = x.out)
z.out <- zelig(Y ~ X1 + X2, model = "mlogit.bayes", weights = w, data = mydata)
x.out <- setx(z.out)
s.out <- sim(z.out, x = x.out)
z.out <- zelig(Y ~ X1 + X2, model = "mlogit.bayes", weights = w, data = mydata)
x.out <- setx(z.out)
s.out <- sim(z.out, x = x.out)
z.out <- zelig(Y ~ X1 + X2, model = "mlogit.bayes", weights = w, data = mydata)
x.out <- setx(z.out)
s.out <- sim(z.out, x = x.out)
z.out <- zelig(Y ~ X1 + X2, model = "mlogit.bayes", weights = w, data = mydata)
x.out <- setx(z.out)
s.out <- sim(z.out, x = x.out)
z.out <- zelig(Y ~ X1 + X2, model = "mlogit.bayes", weights = w, data = mydata)
x.out <- setx(z.out)
s.out <- sim(z.out, x = x.out)
install.packages(sim)
install.packages(zelig)
install.packages(Zelig)
install.packages("Zelig")
library(Zelig)
library(Zelig)
z.out <- zelig(Y ~ X1 + X2, model = "mlogit.bayes", weights = w, data = mydata)
x.out <- setx(z.out)
s.out <- sim(z.out, x = x.out)
data(mexico)
z.out <- zelig(vote88 ~ pristr + othcok + othsocok,
model = "mlogit.bayes", data = mexico,
verbose = FALSE)
z.out$geweke.diag()
z.out$heidel.diag()
z.out$raftery.diag()
summary(z.out)
library(bayesCL)
## Use the iris dataset.
data(iris)
N <- nrow(iris)
P <- ncol(iris)
J <- nlevels(iris$Species)
X     <- model.matrix(Species ~ ., data=iris);
y.all <- model.matrix(~ Species - 1, data=iris);
y     <- y.all[,-J];
out <- mlr(y, X, samp=1000, burn=100, device=0);
install.packages("bayesCL")
install.packages("~/Desktop/bayesCL_0.0.1.tar.gz", repos = NULL, type = "source")
library(bayesCL)
library("bayesCL")
install.packages("~/Desktop/bayesCL_0.0.1.tar.gz", repos = NULL, type = "source")
install.packages("rstan")
ls
cd
gwd(
)
getwd()
setwd("~/Documents/Production/Dynocog/Python Implementation/final instance/R Models")
read.csv(file = '../model-free analysis/final_dataframes/wcst.csv')
read.csv(file = '../model-free analysis/final_dataframes/wcst.csv')
covars.participant[covars.wcst_accuracy > lam]
covars.participant[covars.wcst_accuracy > lam]
wcst       <- read.csv(file = '../model-free analysis/final_dataframes/wcst.csv')
covars <- read.csv(file = '../model-free analysis/final_dataframes/covariates.csv')
covar
covars
covars$participant
covars$wcst_accuracy > lam
lam       = 0.40
covars$wcst_accuracy > lam
covars$participant[covars$wcst_accuracy > lam]
lam       = 0.70
subjects  = covars$participant[covars$wcst_accuracy > lam]
len(subjects)
length(subjects)
lam       = 0.70
subjects  = covars$participant[covars$wcst_accuracy > lam]
wcst_subset = wcst.loc[wcst.participant.isin(subjects)]
wcst_subset
# threshold: percentage correct
lam       = 0.70
subjects  = covars$participant[covars$wcst_accuracy > lam]
subjects
wcst
wcst$participant in subjects
wcst$participant %in% subjects
wcst[wcst$participant %in% subjects,]
